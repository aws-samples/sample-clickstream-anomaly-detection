AWSTemplateFormatVersion: '2010-09-09'
Mappings:
  SubnetConfig:
      VPC:
        CIDR: '10.0.0.0/16'
      PublicOne:
        CIDR: '10.0.0.0/24'
      PrivateSubnetMSKOne:
        CIDR: '10.0.1.0/24'
      PrivateSubnetMSKTwo:
        CIDR: '10.0.2.0/24'
      PrivateSubnetMSKThree:
        CIDR: '10.0.3.0/24'
  
  AssetsBucketMap:
    us-east-1:
      BucketName: ws-assets-prod-iad-r-iad-ed304a55c2ca1aee
    us-east-2:
      BucketName: ws-assets-prod-iad-r-cmh-8d6e9c21a4dec77d
    us-west-1:
      BucketName: ws-assets-prod-iad-r-sfo-f61fc67057535f1b
    us-west-2:
      BucketName: ws-assets-prod-iad-r-pdx-f3b3f9f1a7d6a3d0

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  WorkshopStudioAWSAccount:
    Type: String
    Default: false
    Description: Running the Workshop at an AWS Guided Event.
    AllowedValues:
      - true
      - false
  GlueDatabaseName:
    Type: String
    MinLength: '1'
    Description: Database Name for Iceberg.
    Default: anomaly_cfn

  #################
  # WORKSHOP STUDIO
  #################
      
  MyAssetsBucketPrefix:
    Description: Assets bucket prefix
    Type: String
    Default: daf81e2a-e148-44d7-b9a6-cc7d10445e23/

  #################
  # MSF APP CONFIGURATION
  #################
  MSFAppJar:
    Description:  Model data
    Type: String
    Default: clickstream-anomaly-detection-1.0-SNAPSHOT.jar

Conditions:
  WorkshopStudioAWSAccount: !Equals [ !Ref WorkshopStudioAWSAccount, true ]
  OwnAWSAccount: !Equals [ !Ref WorkshopStudioAWSAccount, false ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: 'Name'
          Value: 'MSKVPC'

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnet'
  PrivateSubnetMSKOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateSubnetMSKOne', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnetMSKOne'
  PrivateSubnetMSKTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateSubnetMSKTwo', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnetMSKTwo'
  PrivateSubnetMSKThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 2
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateSubnetMSKThree', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnetMSKThree'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  NATEIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties: 
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref 'PublicSubnetOne'
      Tags: 
        - Key: 'Name'
          Value: 'KafkaNATGateway'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: NATGateway
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway'

  PrivateSubnetMSKOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetMSKOne
  PrivateSubnetMSKTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetMSKTwo
  PrivateSubnetMSKThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetMSKThree
  KafkaClientInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 from BastionHostSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/24
        - IpProtocol: tcp
          FromPort: 3500
          ToPort: 3500
          CidrIp: 10.0.0.0/24
        - IpProtocol: tcp
          FromPort: 3600
          ToPort: 3600
          CidrIp: 10.0.0.0/24
        - IpProtocol: tcp
          FromPort: 3800
          ToPort: 3800
          CidrIp: 10.0.0.0/24
        - IpProtocol: tcp
          FromPort: 3900
          ToPort: 3900
          CidrIp: 10.0.0.0/24
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: "Allow all outbound traffic"

  KafkaClientEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m5.large
      IamInstanceProfile: !Ref EC2InstanceProfile
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      SubnetId: !Ref 'PrivateSubnetMSKOne'
      SecurityGroupIds: [!GetAtt KafkaClientInstanceSecurityGroup.GroupId]
      ImageId: !Ref LatestAmiId
      Monitoring: true
      EbsOptimized: true
      Tags:
        - Key: 'Name'
          Value: 'KafkaClientInstance'
      UserData:
        Fn::Base64:
          !Sub 
            - |
              #!/bin/bash
              yum update -y
              yum install python3.7 -y
              sudo yum install java-17-amazon-corretto-devel -y
              yum install nmap-ncat -y
              yum install git -y
              yum erase awscli -y
              yum install jq -y
              amazon-linux-extras install docker -y
              service docker start
              usermod -a -G docker ec2-user

              cd /home/ec2-user
              wget https://bootstrap.pypa.io/get-pip.py
              su -c "python3.7 get-pip.py --user" -s /bin/sh ec2-user
              su -c "/home/ec2-user/.local/bin/pip3 install boto3 --user" -s /bin/sh ec2-user
              su -c "/home/ec2-user/.local/bin/pip3 install awscli --user" -s /bin/sh ec2-user
              su -c "/home/ec2-user/.local/bin/pip3 install kafka-python --user" -s /bin/sh ec2-user

              # install AWS CLI 2 - access with aws2
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install -b /usr/local/bin/aws2
              su -c "ln -s /usr/local/bin/aws2/aws ~/.local/bin/aws2" -s /bin/sh ec2-user

              # Create dirs, get Apache Kafka 3.8.1 and unpack it
              su -c "mkdir -p kafka362" -s /bin/sh ec2-user
              cd kafka362
              su -c "wget https://downloads.apache.org/kafka/3.8.1/kafka_2.12-3.8.1.tgz" -s /bin/sh ec2-user
              su -c "tar -xzf kafka_2.12-3.8.1.tgz --strip 1" -s /bin/sh ec2-user
              cd /home/ec2-user
              ln -s /home/ec2-user/kafka362 /home/ec2-user/kafka
              
              # Create client.properties configuration file as well as download the corresponding msk iam auth jar library
              cd /home/ec2-user/kafka/libs
              wget https://github.com/aws/aws-msk-iam-auth/releases/download/v2.0.3/aws-msk-iam-auth-2.0.3-all.jar
              cd ..
              cd bin/
              echo 'security.protocol=SASL_SSL' >> client.properties
              echo 'sasl.mechanism=AWS_MSK_IAM' >> client.properties
              echo 'sasl.jaas.config=software.amazon.msk.auth.iam.IAMLoginModule required;' >> client.properties
              echo 'sasl.client.callback.handler.class=software.amazon.msk.auth.iam.IAMClientCallbackHandler' >> client.properties

              # Initialize the Kafka cert trust store
              su -c 'find /usr/lib/jvm/ -name "cacerts" -exec cp {} /tmp/kafka.client.truststore.jks \;' -s /bin/sh ec2-user

              #### Setup cluster environment variables for Cluster, Bootstrap servers (IAM)
              # echo -E export MSKIAM_BOOTSTRAP=$(aws cloudformation describe-stacks --stack-name ${AWS::StackName} --query 'Stacks[0].Outputs[?OutputKey==`MSKClusterBrokerString`].OutputValue' --output text --region ${AWS::Region}) >> /home/ec2-user/kafka/bin/msk.env
              echo -E export MSKIAM_BOOTSTRAP=${MSKBootstrapAddress} >> /home/ec2-user/kafka/bin/msk.env

              source /home/ec2-user/kafka/bin/msk.env
              export $(cut -d= -f1 /home/ec2-user/kafka/bin/msk.env)

              #### Create topics
              echo -E /home/ec2-user/kafka/bin/kafka-topics.sh --create --topic data-output --partitions 6 retention.ms=3600000 --bootstrap-server $MSKIAM_BOOTSTRAP --command-config /home/ec2-user/kafka/bin/client.properties >> /home/ec2-user/kafka/bin/msktopic.sh
              echo -E /home/ec2-user/kafka/bin/kafka-topics.sh --create --topic data-ingest --partitions 6 retention.ms=3600000 --bootstrap-server $MSKIAM_BOOTSTRAP --command-config /home/ec2-user/kafka/bin/client.properties >> /home/ec2-user/kafka/bin/msktopic.sh
              chmod u+x /home/ec2-user/kafka/bin/msktopic.sh
              /home/ec2-user/kafka/bin/msktopic.sh

              #### Validate
              /home/ec2-user/kafka/bin/kafka-topics.sh --list --bootstrap-server $MSKIAM_BOOTSTRAP --command-config /home/ec2-user/kafka/bin/client.properties >> /home/ec2-user/kafka/bin/topiclist.txt

              cd /tmp
              su -c "mkdir -p kafka" -s /bin/sh ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/producer.properties_msk /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/consumer.properties /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/jars/KafkaClickstreamClient-1.0-SNAPSHOT.jar /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/jars/KafkaClickstreamConsumer-1.0-SNAPSHOT.jar /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/jars/CustomMM2ReplicationPolicy-1.0-SNAPSHOT.jar /home/ec2-user/confluent/share/java/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/jars/MM2GroupOffsetSync-1.0-SNAPSHOT.jar /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/MSKLabs/schema-registry-ssl/schema-registry.properties /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/generatePropertiesFiles.py /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/generateStartupFile.py /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/AuthMSK-1.0-SNAPSHOT.jar /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/connect-distributed.properties /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/kafka-consumer-python.py /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/setup-env.py /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/setup-policy.py /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/GlobalSeqNo.py /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/mm2-msc.json /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/mm2-hbc.json /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/mm2-cpc.json /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/mm2-cpc-cust-repl-policy.json /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/mm2-msc-cust-repl-policy.json /tmp/kafka" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/kafka-connect.yml /home/ec2-user/prometheus" -l ec2-user
              su -c "aws s3 cp s3://aws-streaming-artifacts/msk-lab-resources/kafka-producer-consumer.yml /home/ec2-user/prometheus" -l ec2-user

              #setup bash env
              su -c "echo 'export PS1=\"KafkaClientEC2Instance1 [\u@\h \W]$ \"' >> /home/ec2-user/.bash_profile" -s /bin/sh ec2-user
              su -c "echo '[ -f /tmp/kafka/setup_env ] && . /tmp/kafka/setup_env' >> /home/ec2-user/.bash_profile" -s /bin/sh ec2-user
            - MSKBootstrapAddress: !GetAtt GetClusterDetails.IamBootstrapServers
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonMSKFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCertificateManagerPrivateCAFullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: MSKProducerPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: SecretsAccess
                Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                  - 'kms:Decrypt'
                  - 'kms:DescribeKey'
                  - 'kms:GenerateDataKey'
                  - 'glue:GetSchema'
                  - 'glue:GetSchemaVersion'
                  - 'glue:CreateSchema'
                  - 'glue:UpdateSchema'
                  - 'iam:CreatePolicy'
                  - 'iam:TagPolicy'
                  - 'iam:TagRole'
                  - 'iam:AttachRolePolicy'
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
                  - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'
                  - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:schema/*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
        - PolicyName: MSKConnectAuthentication
          PolicyDocument: !Sub '{
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "kafka-cluster:*Topic*",
                        "kafka-cluster:Connect",
                        "kafka-cluster:AlterCluster",
                        "kafka-cluster:DescribeCluster",
                        "kafka-cluster:DescribeClusterDynamicConfiguration"
                    ],
                    "Resource": [
                        "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/*"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "kafka-cluster:*Topic*",
                        "kafka-cluster:WriteData",
                        "kafka-cluster:ReadData"
                    ],
                    "Resource": [
                        "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/*"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "kafka-cluster:AlterGroup",
                        "kafka-cluster:DescribeGroup"
                    ],
                    "Resource": [
                        "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:group/*"
                    ]
                }
            ]
        }'
  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join
        - '-'
        - - 'EC2MMMSKCFProfile'
          - !Ref 'AWS::StackName'
      Roles:
        - !Ref EC2Role
  MSKSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MSK Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 9098
          ToPort: 9098
          SourceSecurityGroupId: !Ref KafkaClientInstanceSecurityGroup
        - IpProtocol: tcp
          FromPort: 9098
          ToPort: 9098
          SourceSecurityGroupId: !Ref EcsSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: "Allow all outbound traffic"
  MSKSelfIngressAllowRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MSKSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref MSKSecurityGroup
  MSKServerlessCluster:
    Type: AWS::MSK::ServerlessCluster
    Properties:
      ClientAuthentication:
        Sasl:
          Iam:
            Enabled: true
      ClusterName: !Join
                    - '-'
                    - - 'MSKServerless'
                      - !Ref 'AWS::StackName'
      VpcConfigs:
        - SubnetIds:
            - !Ref PrivateSubnetMSKOne
            - !Ref PrivateSubnetMSKTwo
            - !Ref PrivateSubnetMSKThree
          SecurityGroups: 
            - !GetAtt MSKSecurityGroup.GroupId

  MSKClusterPolicy:
    Type: AWS::MSK::ClusterPolicy
    Properties:
      ClusterArn: !Sub "${MSKServerlessCluster.Arn}"
      Policy: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "firehose.amazonaws.com"
            Action:
              - "kafka:CreateVpcConnection"
              - "kafka:DescribeClusterV2"
              - "kafka:GetBootstrapBrokers"
            Resource: !Sub "${MSKServerlessCluster.Arn}"
          - Effect: Allow
            Principal:
              Service: "osis.amazonaws.com"
            Action:
              - "kafka:CreateVpcConnection"
              - "kafka:DescribeClusterV2"
            Resource: !Sub "${MSKServerlessCluster.Arn}"
          - Effect: Allow
            Principal:
              Service: "osis-pipelines.amazonaws.com"
            Action:
              - "kafka:CreateVpcConnection"
              - "kafka:GetBootstrapBrokers"
              - "kafka:DescribeClusterV2"
            Resource: !Sub "${MSKServerlessCluster.Arn}"

  MSKConnectAuthenticationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: MSKConnectAuthenticationPolicy
      Roles:
        - !Ref LambdaGetClusterDetailsRole
        - !Ref MSFApplicationExecutionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'kafka-cluster:*Topic*'
              - 'kafka-cluster:Connect'
              - 'kafka-cluster:AlterCluster'
              - 'kafka-cluster:DescribeCluster'
              - 'kafka-cluster:DescribeClusterDynamicConfiguration'
            Resource:
              - !Sub 'arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/*'
          - Effect: Allow
            Action:
              - 'kafka-cluster:*Topic*'
              - 'kafka-cluster:WriteData'
              - 'kafka-cluster:ReadData'
            Resource:
              - !Sub 'arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/*'
          - Effect: Allow
            Action:
              - 'kafka-cluster:AlterGroup'
              - 'kafka-cluster:DescribeGroup'
            Resource:
              - !Sub 'arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:group/*'

  FirehoseTargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'firehose-msk-lab-${AWS::AccountId}-target-bucket'
  FirehoseRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: OSSFullAccess
          PolicyDocument: !Sub '{
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "aoss:CreateCollection",
                          "aoss:DeleteCollection",
                          "aoss:BatchGetCollection",
                          "aoss:ListCollections",
                          "aoss:UpdateCollection",
                          "aoss:CreateAccessPolicy",
                          "aoss:DeleteAccessPolicy",
                          "aoss:GetAccessPolicy",
                          "aoss:ListAccessPolicies",
                          "aoss:UpdateAccessPolicy",
                          "aoss:CreateSecurityPolicy",
                          "aoss:DeleteSecurityPolicy",
                          "aoss:GetSecurityPolicy",
                          "aoss:ListSecurityPolicies",
                          "aoss:UpdateSecurityPolicy",
                          "aoss:APIAccessAll"
                      ],
                      "Resource": "arn:aws:aoss:${AWS::Region}:${AWS::AccountId}:*"
                  }
              ]
          }'
        - PolicyName: MSKConfigurationAccess
          PolicyDocument: !Sub '{
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "VisualEditor0",
                      "Effect": "Allow",
                      "Action": "kafka:CreateConfiguration",
                      "Resource": "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:configuration/*"
                  }
              ]
          }'
        - PolicyName: FirehoseMSKPolicy
          PolicyDocument: !Sub '{
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "kafka-cluster:*Topic*",
                        "kafka-cluster:Connect",
                        "kafka-cluster:AlterCluster",
                        "kafka-cluster:DescribeCluster",
                        "kafka-cluster:DescribeClusterDynamicConfiguration",
                        "kms:Decrypt",
                        "kinesis:DescribeStream",
                        "kinesis:GetShardIterator",
                        "kinesis:GetRecords",
                        "kinesis:ListShards",
                        "logs:PutLogEvents",
                        "lambda:InvokeFunction",
                        "lambda:GetFunctionConfiguration",
                        "kms:GenerateDataKey",
                        "kms:Decrypt",
                        "glue:GetDatabase",
                        "glue:GetTable",
                        "glue:GetTables",
                        "glue:CreateTable",
                        "glue:UpdateTable",
                        "glue:DeleteTable",
                        "glue:GetPartition",
                        "glue:GetPartitions",
                        "glue:CreatePartition",
                        "glue:UpdatePartition",
                        "glue:DeletePartition",
                        "glue:BatchCreatePartition",
                        "glue:BatchDeletePartition",
                        "ec2:DeleteNetworkInterface",
                        "ec2:DescribeDhcpOptions",
                        "ec2:DescribeSecurityGroups",
                        "ec2:CreateNetworkInterface",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:CreateNetworkInterfacePermission",
                        "ec2:DescribeVpcs",
                        "ec2:DescribeSubnets",
                        "kafka-cluster:Connect",
                        "kafka-cluster:CreateTopic",
                        "kafka-cluster:DescribeTopic",
                        "kafka-cluster:DeleteTopic",
                        "kafka-cluster:WriteData",
                        "kafka-cluster:ReadData",
                        "kafka-cluster:*Topic*",
                        "kafka:CreateVpcConnection",
                        "s3:AbortMultipartUpload",
                        "s3:GetBucketLocation",
                        "s3:GetObject",
                        "s3:ListBucket",
                        "s3:ListBucketMultipartUploads",
                        "s3:PutObject",
                        "s3:PutObjectAcl",
                        "s3:GetBucketVersioning",
                        "kafka:CreateVpcConnection",
                        "kafka:GetBootstrapBrokers",
                        "kafka:DescribeCluster",
                        "kafka:DescribeClusterV2"
                    ],
                    "Resource": [
                        "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/MSKServerless-${AWS::StackName}/*",
                        "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog",
                        "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueDatabaseName}",
                        "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/*/*",
                        "arn:aws:s3:::firehose-msk-lab-${AWS::AccountId}-target-bucket",
                        "arn:aws:s3:::firehose-msk-lab-${AWS::AccountId}-target-bucket/*",
                        "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*",
                        "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%",
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/*:log-stream:*",
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%:log-stream:*",
                        "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%",
                        "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%",
                        "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/MSKServerless-${AWS::StackName}/*",
                        "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/MSKServerless-${AWS::StackName}/*/*",
                        "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:group/MSKServerless-${AWS::StackName}/*/*"

                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "kafka-cluster:*Topic*",
                        "kafka-cluster:WriteData",
                        "kafka-cluster:ReadData"
                    ],
                    "Resource": [
                        "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/MSKServerless-${AWS::StackName}/*"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "kafka-cluster:AlterGroup",
                        "kafka-cluster:DescribeGroup"
                    ],
                    "Resource": [
                        "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:group/MSKServerless-${AWS::StackName}/*"
                    ]
                }
            ]
        }'
  
  #################
  # Code Commit   #
  #################
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: care-anomaly-detection
      RepositoryDescription: Repository for the codebuild which runs necessary scripts and uploads assets to necessary repositories.
      Code:
        S3:
          Bucket: !FindInMap [AssetsBucketMap, !Ref "AWS::Region", BucketName]
          Key: !Sub "${MyAssetsBucketPrefix}event-anomaly-detection-code.zip"

  #################
  # Code Build    #
  #################
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonMSKFullAccess"
      Policies:
        - PolicyName: "PushImageToEcr"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: 
                  - !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/test-data-generator"
        - PolicyName: "CodeBuildLogsRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
        - PolicyName: "CDKDeployPermissions"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # CloudFormation permissions for CDK deployments
              - Effect: Allow
                Action:
                  - "cloudformation:CreateStack"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DescribeStackEvents"
                  - "cloudformation:DescribeStackResources"
                  - "cloudformation:GetTemplate"
                  - "cloudformation:ListStacks"
                  - "cloudformation:ValidateTemplate"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:ListChangeSets"
                Resource: "*"
              # S3 permissions for CDK assets
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                  - "s3:GetBucketLocation"
                  - "s3:ListBucket"
                  - "s3:CreateBucket"
                  - "s3:PutBucketPolicy"
                  - "s3:GetBucketPolicy"
                  - "s3:PutBucketVersioning"
                  - "s3:GetBucketVersioning"
                  - "s3:PutBucketPublicAccessBlock"
                  - "s3:GetBucketPublicAccessBlock"
                  - "s3:GetEncryptionConfiguration"
                  - "s3:PutEncryptionConfiguration"
                  - "s3:PutLifecycleConfiguration"
                  - "s3:GetLifecycleConfiguration"
                  - "s3:PutBucketCORS"
                  - "s3:GetBucketCORS"
                Resource: "*"
              # ECR permissions for container deployments
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:CreateRepository"
                  - "ecr:DescribeRepositories"
                  - "ecr:PutLifecyclePolicy"
                  - "ecr:GetLifecyclePolicy"
                  - "ecr:DeleteRepository"
                  - "ecr:SetRepositoryPolicy"
                Resource: "*"
              # SSM permissions for parameter store
              - Effect: Allow
                Action:
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:PutParameter"
                  - "ssm:DeleteParameter"
                  - "ssm:DescribeParameters"
                  - "ssm:GetParametersByPath"
                Resource: "*"
              # Lambda permissions for function deployments
              - Effect: Allow
                Action:
                  - "lambda:CreateFunction"
                  - "lambda:DeleteFunction"
                  - "lambda:GetFunction"
                  - "lambda:UpdateFunctionCode"
                  - "lambda:UpdateFunctionConfiguration"
                  - "lambda:ListFunctions"
                  - "lambda:InvokeFunction"
                  - "lambda:AddPermission"
                  - "lambda:RemovePermission"
                  - "lambda:GetPolicy"
                  - "lambda:TagResource"
                  - "lambda:UntagResource"
                  - "lambda:ListTags"
                Resource: "*"
              # SNS permissions for notifications
              - Effect: Allow
                Action:
                  - "sns:CreateTopic"
                  - "sns:DeleteTopic"
                  - "sns:GetTopicAttributes"
                  - "sns:SetTopicAttributes"
                  - "sns:Subscribe"
                  - "sns:Unsubscribe"
                  - "sns:ListTopics"
                  - "sns:ListSubscriptionsByTopic"
                  - "sns:Publish"
                Resource: "*"
              # EventBridge permissions for event rules
              - Effect: Allow
                Action:
                  - "events:PutRule"
                  - "events:DeleteRule"
                  - "events:DescribeRule"
                  - "events:ListRules"
                  - "events:PutTargets"
                  - "events:RemoveTargets"
                  - "events:ListTargetsByRule"
                Resource: "*"
              # KMS permissions for encryption
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                  - "kms:DescribeKey"
                  - "kms:ListKeys"
                  - "kms:ListAliases"
                  - "kms:CreateGrant"
                  - "kms:RetireGrant"
                Resource: "*"
              # Bedrock permissions for AI services
              - Effect: Allow
                Action:
                  - "bedrock:InvokeModel"
                  - "bedrock:ListFoundationModels"
                  - "bedrock:GetFoundationModel"
                  - "bedrock:CreateModelCustomizationJob"
                  - "bedrock:GetModelCustomizationJob"
                  - "bedrock:ListModelCustomizationJobs"
                Resource: "*"
              # X-Ray permissions for tracing
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                  - "xray:GetSamplingRules"
                  - "xray:GetSamplingTargets"
                Resource: "*"
              # Other required permissions
              - Effect: Allow
                Action:
                  - "sts:AssumeRole"
                  - "codecommit:GitPull"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:CreateRole"
                  - "iam:DeleteRole"
                  - "iam:GetRole"
                  - "iam:UpdateRole"
                  - "iam:AttachRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:PutRolePolicy"
                  - "iam:DeleteRolePolicy"
                  - "iam:GetRolePolicy"
                  - "iam:ListRolePolicies"
                  - "iam:ListAttachedRolePolicies"
                  - "iam:CreatePolicy"
                  - "iam:DeletePolicy"
                  - "iam:GetPolicy"
                  - "iam:GetPolicyVersion"
                  - "iam:ListPolicyVersions"
                  - "iam:TagRole"
                  - "iam:UntagRole"
                  - "iam:ListRoleTags"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource: 
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-*"
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/cdk-*"
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: Build ECR images for network flow log producer
      Environment:
        Type: "ARM_CONTAINER"
        Image: aws/codebuild/amazonlinux2-aarch64-standard:3.0
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref "AWS::AccountId"
          - Name: ASSET_BUCKET
            Type: PLAINTEXT
            Value: !FindInMap [AssetsBucketMap, !Ref "AWS::Region", BucketName]
          - Name: ASSET_PREFIX
            Type: PLAINTEXT
            Value:
              Ref: MyAssetsBucketPrefix
          - Name: MSKClusterARN
            Type: PLAINTEXT
            Value: !Ref 'MSKServerlessCluster'
        PrivilegedMode: true
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: CODECOMMIT
        Location: !Sub 'https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/care-anomaly-detection'
        GitCloneDepth: 1
        GitSubmodulesConfig:
          FetchSubmodules: false
        SourceIdentifier: main
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            build:
              commands:
                - echo "Build started on `date`"
                - echo "Build & Deploy CDK project"
                - npm install -g aws-cdk
                - npx cdk version
                - python3 -m venv .venv
                - . .venv/bin/activate
                - pip install -r requirements.txt
                - npx cdk bootstrap
                - npx cdk deploy --parameters mskClusterArn=$MSKClusterARN --all --require-approval=never
                - echo Building the Docker image...
                - echo "Building Producer image"
                - aws s3 cp s3://${ASSET_BUCKET}/${ASSET_PREFIX}test-data-generator.tar ./test-data-generator.tar
                - docker load -i ./test-data-generator.tar
                - docker tag test-data-generator:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/test-data-generator:latest
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/test-data-generator:latest

  CustomResourceStartCodeBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/CodeBuildProject-*"
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
  CustomResourceStartCodeBuild:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3, json, urllib3
          codebuild = boto3.client('codebuild')
          events = boto3.client('events')
          lambda_client = boto3.client('lambda')
          http = urllib3.PoolManager()

          def send_response(event, context, response_status, response_data):
              response_body = {
                  "Status": response_status,
                  "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name, 
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event["StackId"],
                  "RequestId": event["RequestId"], 
                  "LogicalResourceId": event["LogicalResourceId"],
              }
              print(json.dumps({"event": "put_to_cf", "response": response_body}, default=str))

              url = event["ResponseURL"]
              response_body = json.dumps(response_body, default=str)
              headers = {
                  "content-type": "application/json",
                  "content-length": len(response_body)
              }

              r = http.request('PUT', url, headers=headers, body=response_body)
              print(json.dumps({"event": "response_from_cf", "status": r.status, "headers": r.getheaders().__dict__}, default=str))
              return response_body

          def handler(event, context):
            # Handle CloudWatch Events from CodeBuild
            if 'source' in event and event['source'] == 'aws.codebuild':
                build_status = event['detail']['build-status']
                build_id = event['detail']['build-id']
                
                # Retrieve stored CFN event from build environment
                build_info = codebuild.batch_get_builds(ids=[build_id])['builds'][0]
                cfn_event_str = None
                for env_var in build_info.get('environment', {}).get('environmentVariables', []):
                    if env_var['name'] == 'CFN_EVENT':
                        cfn_event_str = env_var['value']
                        break
                
                if cfn_event_str:
                    cfn_event = json.loads(cfn_event_str)
                    if build_status == 'SUCCEEDED':
                        return send_response(cfn_event, context, "SUCCESS", {})
                    else:
                        return send_response(cfn_event, context, "FAILED", {"error": f"Build failed with status: {build_status}"})
                return
            
            # Handle CloudFormation custom resource event
            print(json.dumps({"event": "start", "event_body": event, "context": context.__dict__}, default=str))
            
            # Handle Delete request - send immediate success response
            if event['RequestType'] == 'Delete':
                return send_response(event, context, "SUCCESS", {})
            
            # Store CFN event in build environment variable
            cfn_event_str = json.dumps(event)
            
            resp = codebuild.start_build(
                projectName=event['ResourceProperties']['ProjectName'],
                environmentVariablesOverride=[
                    {
                        'name': 'CFN_EVENT',
                        'value': cfn_event_str,
                        'type': 'PLAINTEXT'
                    }
                ]
            )
            print(json.dumps({"event": "resp_from_cb", "result": resp}, default=str))
            
            # Don't send response yet - will be sent by CloudWatch Events
      Handler: "index.handler"
      Runtime: python3.11
      Timeout: 60
      Role: !GetAtt CustomResourceStartCodeBuildExecutionRole.Arn
  
  CodeBuildEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Capture CodeBuild state changes"
      EventPattern:
        source:
          - "aws.codebuild"
        detail-type:
          - "CodeBuild Build State Change"
        detail:
          build-status:
            - "SUCCEEDED"
            - "FAILED"
            - "FAULT"
            - "STOPPED"
            - "TIMED_OUT"
      State: ENABLED
      Targets:
        - Arn: !GetAtt CustomResourceStartCodeBuild.Arn
          Id: "CodeBuildTarget"
  
  CodeBuildEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CustomResourceStartCodeBuild
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CodeBuildEventRule.Arn
  ImageCodeBuild:
    DependsOn:
      - ProducerRepository
      - GetClusterDetails
    Type: Custom::CustomResourceStartCodeBuild
    Properties:
      ServiceToken: !GetAtt CustomResourceStartCodeBuild.Arn
      Region: !Ref "AWS::Region"
      ProjectName: !Ref CodeBuildProject
  # ECS Cluster
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Sub "ecs-${AWS::StackName}"
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "ecs-${AWS::StackName}"
      GroupDescription: ECS Security Group 
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: !Sub "ecs-${AWS::StackName}"
  EcsSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt EcsSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: "0.0.0.0/0"
      Description: "Allow all outbound connections (inter-task and public Docker images)"

 # ECS IAM
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ecs.task-execution-role-${AWS::StackName}"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17" 
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ecs-tasks.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "ecs.task-role-${AWS::StackName}"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17" 
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ecs-tasks.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: AllowIdentifyECSTasks      
              Effect: Allow
              Action:
                - "ecs:List*"
                - "ecs:Describe*"
              Resource:
                - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/*"
                - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*"
                - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/*" 
      Path: "/"
  TaskMskRolePolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyName: !Sub "ecs.msk-admin-${AWS::StackName}"
      RoleName: !Ref ECSTaskRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:  
              - "kafka-cluster:Connect"
              - "kafka-cluster:AlterCluster"
              - "kafka-cluster:DescribeCluster"
              - "kafka-cluster:DescribeClusterDynamicConfiguration" 
              - "kafka-cluster:AlterClusterDynamicConfiguration"
              - "kafka-cluster:WriteDataIdempotently"
            Resource: 
              - !Sub "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/*/*"
          - Effect: Allow
            Action:  
              - "kafka-cluster:CreateTopic"
              - "kafka-cluster:DescribeTopic"
              - "kafka-cluster:AlterTopic"
              - "kafka-cluster:DeleteTopic"
              - "kafka-cluster:DescribeTopicDynamicConfiguration"
              - "kafka-cluster:AlterTopicDynamicConfiguration"
              - "kafka-cluster:WriteData"
              - "kafka-cluster:ReadData"
            Resource:
              - !Sub "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/*/*"
          - Effect: Allow 
            Action:
              - "kafka-cluster:AlterGroup"
              - "kafka-cluster:DeleteGroup"
              - "kafka-cluster:DescribeGroup"
            Resource:
              - !Sub "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:group/*/*"
          - Effect: Allow
            Action:
              - "kafka-cluster:DescribeTransactionalId"
              - "kafka-cluster:AlterTransactionalId"      
            Resource: 
              - !Sub "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:transactional-id/*/*"
# Kafka Producer ECS Task / ECR / Service
  ProducerRepository:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: True
      RepositoryName: test-data-generator
      ImageTagMutability: MUTABLE 
      ImageScanningConfiguration:
        ScanOnPush: true
      EncryptionConfiguration:
        EncryptionType: AES256
  ProducerLogGroup:
    Type: AWS::Logs::LogGroup 
    Properties:
      LogGroupName: "/ecs/test-data-generator"
      RetentionInDays: 5
  ProducerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: test-data-generator
      RequiresCompatibilities: 
        - FARGATE
      NetworkMode: awsvpc
      Cpu: 1024  
      Memory: 2048
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: test-data-generator
          Image: !Sub '${ProducerRepository.RepositoryUri}:latest'
          Cpu: 0
          Essential: true
          Environment:
            - Name: BOOTSTRAP_SERVER
              Value: !Sub '${GetClusterDetails.IamBootstrapServers}'
            - Name: TOPIC_NAME
              Value: data-ingest
            - Name: REGION
              Value: !Ref AWS::Region
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: /ecs/test-data-generator
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
  ProducerService:
    Type: AWS::ECS::Service
    DependsOn:
      - ImageCodeBuild
    Properties:
      Cluster: !Ref EcsCluster 
      TaskDefinition: !Ref ProducerTaskDefinition
      DesiredCount: 0
      NetworkConfiguration:
        AwsvpcConfiguration: 
          Subnets: 
            - !Ref PrivateSubnetMSKOne
            - !Ref PrivateSubnetMSKTwo
            - !Ref PrivateSubnetMSKThree
          SecurityGroups: [!Ref EcsSecurityGroup]
          AssignPublicIp: "DISABLED"
      LaunchType: FARGATE
      EnableExecuteCommand: true
  #################
  # MSF Application
  #################
  MSFApplication:
    Type: AWS::KinesisAnalyticsV2::Application
    Properties:
      ApplicationConfiguration: 
        VpcConfigurations:
          - SecurityGroupIds:
              - !Ref MSKSecurityGroup
            SubnetIds:
              - !Ref PrivateSubnetMSKOne
              - !Ref PrivateSubnetMSKTwo
              - !Ref PrivateSubnetMSKThree
        FlinkApplicationConfiguration:
          CheckpointConfiguration:
            CheckpointingEnabled: True
            CheckpointInterval: 60000
            ConfigurationType: CUSTOM
            MinPauseBetweenCheckpoints: 5000
          ParallelismConfiguration:
            ConfigurationType: CUSTOM
            Parallelism: 4
            ParallelismPerKPU: 1
            AutoScalingEnabled: False
          MonitoringConfiguration:
            ConfigurationType: CUSTOM
            LogLevel: INFO
            MetricsLevel: APPLICATION
        ApplicationCodeConfiguration:
          CodeContent: 
            S3ContentLocation:
              BucketARN: 
                !Sub
                  - "arn:aws:s3:::${MyAssetsBucketName}"
                  - MyAssetsBucketName: !FindInMap [AssetsBucketMap, !Ref "AWS::Region", BucketName]
              FileKey: !Sub '${MyAssetsBucketPrefix}${MSFAppJar}'
          CodeContentType: ZIPFILE
        ApplicationSnapshotConfiguration:
          SnapshotsEnabled: True
        EnvironmentProperties:
          PropertyGroups:
            - PropertyGroupId: 'AnomalyDetection'
              PropertyMap: 
                sinkBootstrapServer: !Sub '${GetClusterDetails.IamBootstrapServers}'
                sinkTopic: data-output
                sourceBootstrapServer: !Sub '${GetClusterDetails.IamBootstrapServers}'
                sourceTopic: data-ingest
                initpos: LATEST
      ApplicationDescription: Anomaly Detection Apache Flink application (MSF)
      ApplicationMode: STREAMING
      ApplicationName: anomaly-detection
      RuntimeEnvironment: FLINK-1_18
      ServiceExecutionRole: !GetAtt MSFApplicationExecutionRole.Arn
 
  MSFGlueDatabase:
    Type: AWS::Glue::Database
    Properties: 
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput: 
        Description: !Join
          - ' '
          - - !Ref GlueDatabaseName
            - 'For forensic analysis of anomalies'
        Name: !Ref GlueDatabaseName
  #Glue Iceberg Tables
  BusinessConversionMetricsTable:
    Type: AWS::Glue::Table
    DependsOn:
      - MSFGlueDatabase
      - FirehoseTargetBucket
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref MSFGlueDatabase
      TableInput:
        Name: "business_conversion_metrics"
        StorageDescriptor:
          Columns:
            - Name: "timestamp"
              Type: "timestamp"
            - Name: "metric_name"
              Type: "string"
            - Name: "metric_value"
              Type: "double"
            - Name: "conversion_type"
              Type: "string"
            - Name: "channel"
              Type: "string"
          Location: !Sub "s3://firehose-msk-lab-${AWS::AccountId}-target-bucket/business-conversion-metrics/"
        TableType: "EXTERNAL_TABLE"
        Parameters:
          table_type: "ICEBERG"
      OpenTableFormatInput:
        IcebergInput:
          MetadataOperation: "CREATE"
          Version: "2"

  BusinessHealthMetricsTable:
    Type: AWS::Glue::Table
    DependsOn:
      - MSFGlueDatabase
      - FirehoseTargetBucket
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref MSFGlueDatabase
      TableInput:
        Name: "business_health_metrics"
        StorageDescriptor:
          Columns:
            - Name: "timestamp"
              Type: "timestamp"
            - Name: "metric_name"
              Type: "string"
            - Name: "metric_value"
              Type: "double"
            - Name: "service"
              Type: "string"
            - Name: "region"
              Type: "string"
          Location: !Sub "s3://firehose-msk-lab-${AWS::AccountId}-target-bucket/business-health-metrics/"
        TableType: "EXTERNAL_TABLE"
        Parameters:
          table_type: "ICEBERG"
      OpenTableFormatInput:
        IcebergInput:
          MetadataOperation: "CREATE"
          Version: "2"

  BusinessProductMetricsTable:
    Type: AWS::Glue::Table
    DependsOn:
      - MSFGlueDatabase
      - FirehoseTargetBucket
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref MSFGlueDatabase
      TableInput:
        Name: "business_product_metrics"
        StorageDescriptor:
          Columns:
            - Name: "timestamp"
              Type: "timestamp"
            - Name: "metric_name"
              Type: "string"
            - Name: "metric_value"
              Type: "double"
            - Name: "product_id"
              Type: "string"
            - Name: "category"
              Type: "string"
          Location: !Sub "s3://firehose-msk-lab-${AWS::AccountId}-target-bucket/business-product-metrics/"
        TableType: "EXTERNAL_TABLE"
        Parameters:
          table_type: "ICEBERG"
      OpenTableFormatInput:
        IcebergInput:
          MetadataOperation: "CREATE"
          Version: "2"

  MSFLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 365

  MSFLogStream: 
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Ref MSFLogGroup

  MSFGlueDatabasePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Glue database access policy for MSF Interactive
      ManagedPolicyName: !Join
        - '-'
        - - glue-database-access-policy
          - !Ref 'AWS::StackName'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Action:
              - glue:GetConnection
              - glue:GetTable
              - glue:GetTables
              - glue:CreateTable
              - glue:UpdateTable
              - glue:GetDatabases
              - glue:GetUserDefinedFunction
              - glue:GetPartitions
              - glue:DeleteTable
            Resource: 
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:connection/*'
              - !Join 
                - ''
                - - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/'
                  - !Ref MSFGlueDatabase
                  - '/*'
              - !Join 
                - ''
                - - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/'
                  - !Ref MSFGlueDatabase
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/hive'
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog'
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:userDefinedFunction/*'
          - Effect: Allow
            Action:
              - glue:GetDatabase
            Resource:
              - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/*'

  MSFApplicationExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      Description: MSF Service Execution Role
      RoleName: !Join
        - '-'
        - - MSFApplicationExecutionRole
          - !Ref 'AWS::StackName'
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: !Join
                  - ''
                  - - kinesisanalytics.
                    - !Ref 'AWS::URLSuffix'
              Action:
                - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonKinesisAnalyticsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
        - arn:aws:iam::aws:policy/AmazonMSKFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - !Ref MSFGlueDatabasePolicy
      
  #################
  # Custom Resources (Lambda)
  #################
  LambdaGetClusterDetails:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
            import json
            import boto3
            import cfnresponse

            client = boto3.client('kafka')

            def lambda_handler(event, context):
              print("Received Event:\n" + json.dumps(event))
              response = {}
              try: 
                if event['RequestType'] == 'Create':
                  bootstrap_brokers = {}
                  
                  bootstrap_brokers = client.get_bootstrap_brokers(
                    ClusterArn=event['ResourceProperties']['ClusterArn']
                  )
        
                  response = {
                    'IamBootstrapServers': bootstrap_brokers['BootstrapBrokerStringSaslIam']
                  }

                  print("sending bootstrap brokers url")
                
                  print("Sending response to event: ", event['RequestType'])
                  print("Response: ", response)
                  return cfnresponse.send(event, context, cfnresponse.SUCCESS, response, event['LogicalResourceId'])
                
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['LogicalResourceId'])
              except Exception as e:
                print("Failed getting bootstrap brokers:", e)
                cfnresponse.send(event, context, cfnresponse.FAILED, response, event['LogicalResourceId'])
      Handler: index.lambda_handler
      Runtime: python3.10
      Role: !GetAtt LambdaGetClusterDetailsRole.Arn
      MemorySize: 256
      Timeout: 30
      
  GetClusterDetails:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt LambdaGetClusterDetails.Arn
      Region: !Ref "AWS::Region"
      ClusterArn: !GetAtt MSKServerlessCluster.Arn


  LambdaGetClusterDetailsRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Lambda get cluster details role
      RoleName: !Join
        - '-'
        - - LambdaGetClusterDetailsRole
          - !Ref 'AWS::StackName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
        - arn:aws:iam::aws:policy/AmazonMSKFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  
  # #########
  # Generative AI
  # #########

  MSFStartAppLambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Description: Lambda Role that can create MSF Apps
      Path: "/"
      Policies: 
        - PolicyName: AllowCreateMSFApp
          PolicyDocument: {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Action": [
                  "kinesisanalytics:CreateApplication",
                  "kinesisanalytics:DeleteApplication",
                  "kinesisanalytics:DescribeApplication",
                  "kinesisanalytics:UpdateApplication",
                  "kinesisanalytics:StartApplication",
                  "kinesisanalytics:StopApplication",
                  "kinesisanalytics:ListApplications",
                  "kinesisanalytics:AddApplicationInput",
                  "kinesisanalytics:AddApplicationOutput",
                  "kinesisanalytics:AddApplicationReferenceDataSource",
                  "kinesisanalytics:DeleteApplicationInput",
                  "kinesisanalytics:DeleteApplicationOutput",
                  "kinesisanalytics:DeleteApplicationReferenceDataSource"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Action": [
                  "iam:CreateRole",
                  "iam:DeleteRole",
                  "iam:GetRole",
                  "iam:UpdateRole",
                  "iam:AttachRolePolicy",
                  "iam:DetachRolePolicy",
                  "iam:PutRolePolicy",
                  "iam:DeleteRolePolicy",
                  "iam:GetRolePolicy",
                  "iam:ListRolePolicies",
                  "iam:ListAttachedRolePolicies",
                  "iam:TagRole",
                  "iam:UntagRole",
                  "iam:ListRoleTags"
                ],
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Action": "iam:PassRole",
                "Effect": "Allow",
                "Resource": [
                  "arn:aws:iam::*:role/service-role/kinesis-analytics-*",
                  "arn:aws:iam::*:role/KinesisAnalytics-*"
                ]
              },
              {
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:DescribeLogGroups",
                  "logs:DescribeLogStreams",
                  "logs:GetLogEvents"
                ],
                "Effect": "Allow",
                "Resource": "*"
              }
            ]
          }
      RoleName: !Sub '${AWS::StackName}-LamdaRoleForStartingMSFApp'
  PublishFirehoseLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - arn:aws:iam::aws:policy/AmazonMSKFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
      Policies:
        - PolicyName: PublishToFirehose
          PolicyDocument:
            Statement:
            - Action:
              - firehose:PutRecord
              Effect: Allow
              Resource: !Sub 'arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/*'
  ### Auto Start Flink Apps
  StartFlinkAppLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: 
      - MSFApplication
      - MSFStartAppLambdaRole
    Properties: 
      Code: 
        ZipFile: |
          import boto3
          import os
          import json
          import cfnresponse
          import datetime

          def handler(event, context):
                  
            try:
                  MSF_APPLICATION_NAME = os.environ["MSF_APPLICATION_NAME"]
                  client = boto3.client('kinesisanalyticsv2')

                  print("Received Event:\n" + json.dumps(event))
                  
                  if(event["RequestType"] == "Create"):
                      msf_start_response = client.start_application(
                          ApplicationName=MSF_APPLICATION_NAME
                      )
                      print("START RESPONSE", msf_start_response)

                      return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

            except Exception as err:
                cfnresponse.send(event, context, cfnresponse.FAILED, err)
      Description: Lambda Function To Start MSF App in VPC
      Environment: 
          Variables: 
              MSF_APPLICATION_NAME: !Ref MSFApplication
      FunctionName: start_msf_apps
      Role: { "Fn::GetAtt" : [ "MSFStartAppLambdaRole", "Arn" ] }
      Runtime: python3.8
      Handler: index.handler
      Timeout: 300

  StartFlinkApps:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt StartFlinkAppLambdaFunction.Arn
    DependsOn: StartFlinkAppLambdaFunction
  
  # OpenSearch Serverless and OSi
  # AWSEC2InstanceRoleForAOSS:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: 
  #             - osis-pipelines.amazonaws.com
  #           Action: sts:AssumeRole
  #     RoleName: 'AWSEC2InstanceRoleForAOSS'
  # AWSCustomPolicyForAOSS:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: AWSCustomPolicyForAOSS
  #     Roles:
  #       - !Ref AWSEC2InstanceRoleForAOSS
  #     PolicyDocument: !Sub '{
  #       "Version": "2012-10-17",
  #       "Statement": [
  #           {
  #               "Effect": "Allow",
  #               "Action": [
  #                   "aoss:APIAccessAll",
  #                   "aoss:BatchGetCollection",
  #                   "aoss:DashboardsAccessAll",
  #                   "aoss:CreateSecurityPolicy",
  #                   "aoss:GetSecurityPolicy",
  #                   "aoss:UpdateSecurityPolicy"
  #               ],
  #               "Resource": "*"
  #           },
  #           {
  #               "Effect": "Allow",
  #               "Action": [
  #                 "kafka:CreateVpcConnection",
  #                 "kafka:GetBootstrapBrokers",
  #                 "kafka:DescribeClusterV2"
  #               ],
  #               "Resource": "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/MSKServerless-${AWS::StackName}/*"
  #             },
  #           {
  #               "Effect": "Allow",
  #               "Action": [
  #                 "kafka-cluster:Connect",
  #                 "kafka-cluster:AlterCluster",
  #                 "kafka-cluster:DescribeCluster",
  #                 "kafka:DescribeClusterV2",
  #                 "kafka:GetBootstrapBrokers"
  #               ],
  #               "Resource": "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/MSKServerless-${AWS::StackName}/*"
  #           },
  #           {
  #               "Effect": "Allow",
  #               "Action": [
  #                   "kafka-cluster:*Topic*",
  #                   "kafka-cluster:ReadData"
  #               ],
  #               "Resource": "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/MSKServerless-${AWS::StackName}/*/*"
  #           },
  #           {
  #               "Effect": "Allow",
  #               "Action": [
  #                   "kafka-cluster:AlterGroup",
  #                   "kafka-cluster:DescribeGroup"
  #               ],
  #               "Resource": "arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:group/MSKServerless-${AWS::StackName}/*/*"
  #           }
  #       ]
  #     }'

  # DataAccessPolicy:
  #   Type: AWS::OpenSearchServerless::AccessPolicy
  #   Properties:
  #     Name: ad-access-policy
  #     Type: data
  #     Description: Access policy for anomaly-detection collection
  #     Policy: !Sub 
  #     - '[{
  #         "Description": "Access for Workshop Participant Role",
  #         "Rules": [{
  #           "ResourceType": "index",
  #           "Resource": ["index/anomaly-detection-search/*"],
  #           "Permission": ["aoss:*"]
  #         }],
  #         "Principal": ["arn:aws:iam::${AWS::AccountId}:role/WSParticipantRole", "arn:aws:iam::${AWS::AccountId}:role/AWSEC2InstanceRoleForAOSS"]
  #       },
  #       {
  #         "Description": "Access for Workshop Participant Role",
  #         "Rules": [{
  #           "ResourceType": "collection",
  #           "Resource": ["collection/anomaly-detection-search"],
  #           "Permission": ["aoss:*"]
  #         }],
  #         "Principal": ["arn:aws:iam::${AWS::AccountId}:role/WSParticipantRole", "arn:aws:iam::${AWS::AccountId}:role/AWSEC2InstanceRoleForAOSS"]
  #       }]'
  #     - FirehoseRoleArn: !GetAtt FirehoseRole.Arn
        
  # NetworkPolicy:
  #   Type: AWS::OpenSearchServerless::SecurityPolicy
  #   Properties:
  #     Name: ad-network-policy
  #     Type: network
  #     Description: Network policy for anomaly-detection collection
  #     Policy: !Sub |
  #       [{
  #         "Rules": [
  #           {
  #             "ResourceType": "collection",
  #             "Resource": ["collection/anomaly-detection-search"]
  #           },
  #           {
  #             "ResourceType": "dashboard",
  #             "Resource": ["collection/anomaly-detection-search"]
  #           }
  #         ],
  #         "AllowFromPublic": true
  #       }]
      
  # EncryptionPolicy:
  #   Type: AWS::OpenSearchServerless::SecurityPolicy
  #   Properties:
  #     Name: ad-encryption-policy
  #     Type: encryption
  #     Description: Encryption policy for anomaly-detection collection
  #     Policy: !Sub |
  #       {
  #         "Rules": [
  #           {
  #             "ResourceType": "collection",
  #             "Resource": ["collection/anomaly-detection-search"]
  #           }
  #         ],
  #         "AWSOwnedKey": true
  #       }
  
  # Collection:
  #   Type: AWS::OpenSearchServerless::Collection
  #   DeletionPolicy: Delete
  #   UpdateReplacePolicy: Delete
  #   Properties:
  #     Name: anomaly-detection-search
  #     Type: SEARCH
  #     Description: Collection to hold search data from MSK Serverless for visualization
  #   DependsOn: EncryptionPolicy
  
  # MSKPipelineLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties: 
  #     RetentionInDays: 7
  #     LogGroupName: "/aws/vendedlogs/msk-osi-pipeline"
  
  # OpenSearch Ingestion Pipeline
  # MSKPipeline:
  #   Type: AWS::OSIS::Pipeline
  #   DependsOn: 
  #     - Collection
  #     - MSKServerlessCluster
  #   Properties:
  #     MinUnits: 3
  #     MaxUnits: 6
  #     LogPublishingOptions:
  #       IsLoggingEnabled: true
  #       CloudWatchLogDestination:
  #         LogGroup: !Ref MSKPipelineLogGroup
  #     PipelineName: msk-pipeline
  #     PipelineConfigurationBody: !Sub |
  #         version: "2"
  #         msk-pipeline:
  #           source:
  #             kafka:
  #               acknowledgments: true
  #               topics:
  #                 - name: "data-output"
  #                   group_id: "group-id"
  #               aws:
  #                 msk:
  #                   arn: "${MSKServerlessCluster.Arn}"
  #                 region: "${AWS::Region}"
  #                 sts_role_arn: "arn:aws:iam::${AWS::AccountId}:role/AWSEC2InstanceRoleForAOSS"
  #           processor:
  #             - parse_json:
  #                 handle_failed_events: "skip_silently"
    
  #             - date:
  #                 destination: "@timestamp"
  #                 from_time_received: true
  #           sink:
  #             - opensearch:
  #                 hosts:
  #                   - "${Collection.CollectionEndpoint}"
  #                 aws:
  #                   sts_role_arn: "arn:aws:iam::${AWS::AccountId}:role/AWSEC2InstanceRoleForAOSS"
  #                   region: "${AWS::Region}"
  #                   serverless: true
  #                   serverless_options:
  #                     network_policy_name: "ad-network-policy"
  #                 index: "anomaly-detection-index"

Outputs:
  MSKSecurityGroupID:
    Description: The ID of the security group created for the MSK clusters
    Value: !GetAtt MSKSecurityGroup.GroupId
  SSHKafkaClientEC2Instance:
    Description: SSH command for Kafka the EC2 instance
    Value: !Sub ssh -A ec2-user@${KafkaClientEC2Instance.PrivateDnsName}
    Export:
      Name: !Sub "${AWS::StackName}-SSHKafkaClientEC2Instance"
  KafkaClientEC2InstanceSecurityGroupId:
    Description: The security group id for the EC2 instance
    Value: !GetAtt KafkaClientInstanceSecurityGroup.GroupId
  MSKClusterArn:
    Description: The Arn for the MSKMMCluster1 MSK cluster
    Value: !Ref 'MSKServerlessCluster'
    Export:
      Name: !Sub "${AWS::StackName}-MSKClusterArn"
  VPCId: 
    Description: The ID of the VPC created
    Value: !Ref 'VPC'
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  PublicSubnetOne: 
    Description: The name of the public subnet created
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetOne"
  PrivateSubnetMSKOne: 
    Description: The ID of private subnet one created
    Value: !Ref 'PrivateSubnetMSKOne'
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetMSKOne"
  PrivateSubnetMSKTwo: 
    Description: The ID of private subnet two created
    Value: !Ref 'PrivateSubnetMSKTwo'
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetMSKTwo"
  PrivateSubnetMSKThree: 
    Description: The ID of private subnet three created
    Value: !Ref 'PrivateSubnetMSKThree'
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetMSKThree"
  VPCStackName: 
    Description: The name of the VPC Stack
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub "${AWS::StackName}-VPCStackName"
  MSKClusterBrokerString:
    Description: Broker URI string for MSK cluster
    Value: !GetAtt GetClusterDetails.IamBootstrapServers
    Export:
      Name: !Sub "${AWS::StackName}-MSKClusterBrokerString"